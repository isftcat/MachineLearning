import math
from sklearn.model_selection import train_test_split
from collections import defaultdict

#calculate positiveProportion of input_set
def positiveProportionCalculator(input_set):

	count = 0
	for instance in input_set:
		if (instance[label_index] == '2'):
			count = count + 1
	return (float(count)/len(input_set))

#calculate entropy of input_set
def entropyCalculator(input_set):

	positiveProportion = positiveProportionCalculator(input_set)
	negativeProportion = 1 - positiveProportion
	if (positiveProportion == 0 or positiveProportion == 1):
		return 0
	else:
		negativeProportion = 1 - positiveProportion
		res = - positiveProportion * math.log(positiveProportion)/math.log(2) - (negativeProportion) * math.log(negativeProportion)/math.log(2)
		return res

def missingAttributeValueHandler(input_set,label,attribute_index):
	value_list = []
	for instance in input_set:
		if (instance[label_index] == label):
			value_list.append(instance[attribute_index])
	count_dict = defaultdict(int)
	selected_value = value_list[0]
	for value in value_list:
		count_dict[value] = count_dict[value] + 1
		if (count_dict[value] > count_dict[selected_value]):
			selected_value = value
	return selected_value


#calculate the information gain of input_set when ith attribute is selected
def informationGainCalculator(input_set,attribute_index,input_value_set):
	gain = 0
	input_set_entropy = entropyCalculator(input_set)
	input_set_num = len(input_set)

	expected_entropy = 0
	for value in input_value_set:
		current_value_set =[]
		for instance in input_set:

			if (instance[attribute_index] == '?'):
				instance[attribute_index] = missingAttributeValueHandler(input_set,instance[label_index],attribute_index)
				"""
				set_value = missingAttributeValueHandler(input_set,instance[label_index],attribute_index)
				if(set_value == value):
					current_value_set.append(instance)
				"""
			if (instance[attribute_index] == value) :
				current_value_set.append(instance)
		
		value_set_num = len(current_value_set)
		if (value_set_num == 0):
			value_entropy =0
		else:
			value_entropy = entropyCalculator(current_value_set)
		expected_entropy = expected_entropy + value_set_num * value_entropy / input_set_num

	gain = input_set_entropy - expected_entropy
	return gain



#select one attribute as node based on information gain calculation
def attributeSelection(input_set,current_attribute_set,input_value_set):
	result = 0
	max_gain = 0
	for i in current_attribute_set:
		gain = informationGainCalculator(input_set,i,input_value_set)
		if (gain > max_gain):
			result = i
			max_gain = gain
	return result




class TreeNode:
	def __init__(self, value, word):
		self.value = value
		self.word = word
		self.children = []

	def addChild(self,node):
		self.children.append(node)

	def printTree(self, level=0):
		print '\t' * level + repr(self.word)
		for child in self.children:
			child.printTree(level+1)


def majorityVoting(input_set):
	positive_num = 0
	negative_num = 0
	for instance in input_set:
		if(instance[label_index] == str(positive)):
			positive_num = positive_num + 1
		else:
			negative_num = negative_num + 1

	if(negative_num <= positive_num):
		return positive
	else:
		return negative



def constructDecisionTree(input_set, current_attribute_set, input_value_set,attributes):
	if (input_set == []):
		root = TreeNode(0,"unknown")
		return root

	if (current_attribute_set == []):
		leaf = majorityVoting(input_set)
		if (leaf == '2'):
			leaf_word = "yes"
		else:
			leaf_word = "no"
		root = TreeNode(leaf,leaf_word)
		return root
	
    
	if (positiveProportionCalculator(input_set) == 1):
		root = TreeNode(positive,"yes")
		return root
	elif (positiveProportionCalculator(input_set) == 0):
		root = TreeNode(negative,"no")
		return root

	attribute_index = attributeSelection(input_set, current_attribute_set, input_value_set)
	current_attribute_set.remove(attribute_index)
	root = TreeNode(attribute_index,attributes[attribute_index - 1])
	for i in input_value_set:
		output_set = []
		for instance in input_set:
			if (instance[attribute_index] == i):
				output_set.append(instance)
		if (len(output_set) == 275):
			print output_set
		root.addChild(constructDecisionTree(output_set,current_attribute_set,input_value_set,attributes));
	return root


def classifier(root,instance):
	if(root.children ==[]):
		return root.value
	
	if (instance[root.value] == '?'):
		# change it latter
		attribute_value = int('1')
	else:
		attribute_value = int(instance[root.value])

	return classifier(root.children[attribute_value - 1],instance)

def accuracyCalculator(root,input_set):
	total_num = len(input_set)
	correct_num = 0
	for instance in input_set:
		label = classifier(root,instance)
		if (label == int(instance[label_index])):
			correct_num = correct_num + 1
	return float(correct_num)/total_num

def predict(root,input_set):
	result = []
	for instance in input_set:
		result.append(classifier(root,instance))
	print result




#test = [['0001','1','1','1','1','1','1','2'],['0002','1','1','2','1','1','1','2'],['0003','2','2','2','1','1','2','4'],['0004','1','1','2','1','2','2','2'],['0005','1','1','1','2','1','1','4']]
#test_value_set = ['1','2']
#test_attribute_set = [1,2,3,4,5,6]
#attributes = ['None','Sky','Air-Temp','Humidity','Wind','Water','Forecast']
#positive = 2
#negative = 4
#label_index = 7

#load dataset into numpy array
file = open("breast-cancer-wisconsin.data")
raw_data = []
for row in file:
	row = row.strip("\r\n")
	raw_data.append(row.split(','))
#data = np.array(raw_data)

#shuffle and split data into train_set and test_set
train_set,test_set = train_test_split(raw_data, train_size=0.8,random_state=32)

#define constant
attributes = ['Clump Thickness','Uniformity of Cell Size','Uniformity of Cell Shape','Marginal Adhesion','Single Epithelial Cell Size','Bare Nuclei','Bland Chromatin','Normal Nucleoli','Mitoses']
attribute_set = [1,2,3,4,5,6,7,8,9]
value_set = ['1','2','3','4','5','6','7','8','9','10']
labels = ['benign','malignant']
positive = 2
negative = 4
label_index = 10
"""
print positiveProportionCalculator(train_set)
print entropyCalculator(train_set)
print informationGainCalculator(train_set,1,value_set)

print attributeSelection(train_set,attribute_set,value_set)
attribute_set.remove(attributeSelection(train_set,attribute_set,value_set))
print attributeSelection(train_set,attribute_set,value_set)
"""
#result = constructDecisionTree(train_set,attribute_set,value_set,attributes)
"""
print "Decision Tree:"

result.printTree(0)

print "accuracy for training set:"
print accuracyCalculator(result,train_set)
print "accuracy for testing set:"
print accuracyCalculator(result,test_set)


"""
"""
print "classification result:"
print classifier(result,['0006','1','1','2','1','2','1','2'])
print classifier(result,['0007','1','1','2','2','2','1','4'])
print classifier(result,['0008','1','1','1','1','2','1','4'])
print "accuracy for training set:"
print accuracyCalculator(result,train_set)
print "accuracy for testing set:"
print accuracyCalculator(result,test_set)
"""
test_a = [1,3,4,5,7,8,9]
test = [['1160476', '2', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['693702', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1131411', '1', '1', '1', '2', '2', '1', '2', '1', '1', '2'], ['1223282', '1', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1368273', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1199983', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1223426', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1212251', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1214556', '3', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1179818', '2', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1277018', '2', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1190485', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1238186', '4', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['805448', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1303489', '3', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['432809', '3', '1', '3', '1', '2', '1', '2', '1', '1', '2'], ['1333495', '3', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1347749', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1156948', '3', '1', '1', '2', '2', '1', '1', '1', '1', '2'], ['1181685', '1', '1', '2', '1', '2', '1', '2', '1', '1', '2'], ['1223967', '6', '1', '3', '1', '2', '1', '3', '1', '1', '2'], ['1000025', '5', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1061990', '4', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['493452', '4', '1', '2', '1', '2', '1', '2', '1', '1', '2'], ['1345593', '3', '1', '1', '3', '2', '1', '2', '1', '1', '2'], ['733639', '3', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1326892', '3', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1066979', '5', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1260659', '3', '1', '4', '1', '2', '1', '1', '1', '1', '2'], ['1145420', '6', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['807657', '6', '1', '3', '2', '2', '1', '1', '1', '1', '2'], ['534555', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1257608', '6', '1', '1', '1', '1', '1', '1', '1', '1', '2'], ['1165297', '2', '1', '1', '2', '2', '1', '1', '1', '1', '2'], ['1200772', '1', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1355260', '1', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['561477', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1311875', '5', '1', '2', '1', '2', '1', '1', '1', '1', '2'], ['1197270', '3', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1320077', '1', '1', '1', '1', '1', '1', '2', '1', '1', '2'], ['896404', '2', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1304595', '3', '1', '1', '1', '1', '1', '2', '1', '1', '2'], ['1103722', '1', '1', '1', '1', '2', '1', '2', '1', '2', '2'], ['1257938', '3', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1177027', '3', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['566509', '5', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['636437', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1197080', '4', '1', '1', '1', '2', '1', '3', '2', '1', '2'], ['1167471', '4', '1', '2', '1', '2', '1', '3', '1', '1', '2'], ['1042252', '3', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1106095', '4', '1', '1', '3', '2', '1', '3', '1', '1', '2'], ['1238915', '5', '1', '2', '1', '2', '1', '3', '1', '1', '2'], ['1299596', '2', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['714039', '3', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1049837', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1348851', '3', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1268766', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1287971', '3', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1035283', '1', '1', '1', '1', '1', '1', '3', '1', '1', '2'], ['1117152', '4', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['558538', '4', '1', '3', '3', '2', '1', '1', '1', '1', '2'], ['1261751', '5', '1', '1', '1', '2', '1', '2', '2', '1', '2'], ['1321321', '5', '1', '1', '3', '2', '1', '1', '1', '1', '2'], ['385103', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1074610', '2', '1', '1', '2', '2', '1', '3', '1', '1', '2'], ['1333063', '5', '1', '3', '1', '2', '1', '3', '1', '1', '2'], ['1213383', '5', '1', '1', '4', '2', '1', '3', '1', '1', '2'], ['1354840', '2', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1158247', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2'], ['1212232', '5', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1365328', '1', '1', '2', '1', '2', '1', '2', '1', '1', '2'], ['1184840', '1', '1', '3', '1', '2', '1', '2', '1', '1', '2'], ['1266124', '5', '1', '2', '1', '2', '1', '1', '1', '1', '2'], ['560680', '3', '1', '2', '1', '2', '1', '2', '1', '1', '2'], ['1067444', '2', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1227081', '3', '1', '1', '3', '2', '1', '1', '1', '1', '2'], ['1193210', '2', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1287282', '3', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1022257', '2', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1320304', '3', '1', '2', '2', '2', '1', '1', '1', '1', '2'], ['1229929', '1', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1201870', '4', '1', '1', '3', '1', '1', '2', '1', '1', '2'], ['1239420', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1199731', '3', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['466906', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['733639', '3', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1135090', '4', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1075123', '3', '1', '2', '1', '2', '1', '2', '1', '1', '2'], ['560680', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['411453', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1289391', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1164066', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1202253', '5', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1041043', '4', '1', '3', '1', '2', '1', '2', '1', '1', '2'], ['769612', '3', '1', '1', '2', '2', '1', '1', '1', '1', '2'], ['1155546', '2', '1', '1', '2', '3', '1', '2', '1', '1', '2'], ['740492', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['636130', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1339781', '4', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['897172', '2', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1071760', '2', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1183240', '4', '1', '2', '1', '2', '1', '2', '1', '1', '2'], ['749653', '3', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['690557', '5', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1321931', '5', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1113061', '5', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['654546', '1', '1', '1', '3', '2', '1', '1', '1', '1', '2'], ['1296025', '4', '1', '2', '1', '2', '1', '1', '1', '1', '2'], ['1216947', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1217717', '5', '1', '1', '6', '3', '1', '1', '1', '1', '2'], ['1183516', '3', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1272039', '1', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['486283', '3', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1171710', '1', '1', '1', '1', '2', '1', '2', '3', '1', '2'], ['1325159', '3', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1288608', '3', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1294413', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['431495', '3', '1', '1', '1', '2', '1', '3', '2', '1', '2'], ['1238777', '6', '1', '1', '3', '2', '1', '1', '1', '1', '2'], ['1311108', '1', '1', '1', '3', '2', '1', '1', '1', '1', '2'], ['826923', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1213784', '3', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['769612', '4', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1293966', '4', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1070935', '1', '1', '3', '1', '2', '1', '1', '1', '1', '2'], ['1198641', '3', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1277792', '5', '1', '1', '3', '2', '1', '1', '1', '1', '2'], ['183936', '3', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1170945', '3', '1', '1', '1', '1', '1', '2', '1', '1', '2'], ['1058849', '5', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1299924', '5', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1290203', '3', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1197510', '5', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1197527', '5', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['763235', '3', '1', '1', '1', '2', '1', '2', '1', '2', '2'], ['654546', '1', '1', '1', '1', '2', '1', '1', '1', '8', '2'], ['1297327', '5', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1187457', '3', '1', '1', '3', '8', '1', '5', '8', '1', '2'], ['1184586', '4', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1220330', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1180523', '3', '1', '1', '1', '2', '1', '2', '2', '1', '2'], ['1171578', '3', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1180831', '3', '1', '1', '1', '3', '1', '2', '1', '1', '2'], ['1183246', '1', '1', '1', '1', '1', '1', '2', '1', '1', '2'], ['1116192', '5', '1', '2', '1', '2', '1', '3', '1', '1', '2'], ['1321348', '2', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['434518', '3', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['521441', '5', '1', '1', '2', '2', '1', '2', '1', '1', '2'], ['1036172', '2', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1238464', '1', '1', '1', '1', '1', '1', '2', '1', '1', '2'], ['1257815', '5', '1', '3', '1', '2', '1', '2', '1', '1', '2'], ['1217264', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1276091', '5', '1', '1', '3', '4', '1', '3', '2', '1', '2'], ['1265899', '4', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1143978', '4', '1', '1', '2', '2', '1', '2', '1', '1', '2'], ['1073836', '5', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['527337', '4', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['810104', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1213273', '2', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1203096', '1', '1', '1', '1', '1', '1', '3', '1', '1', '2'], ['764974', '5', '1', '1', '1', '2', '1', '3', '1', '2', '2'], ['1057067', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2'], ['1178580', '5', '1', '3', '1', '2', '1', '2', '1', '1', '2'], ['1204558', '4', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['411453', '5', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1183911', '2', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1056171', '2', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1339781', '1', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1238021', '1', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['8233704', '4', '1', '1', '1', '1', '1', '2', '1', '1', '2'], ['1268313', '5', '1', '1', '3', '2', '1', '1', '1', '1', '2'], ['1239967', '1', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['456282', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['798429', '4', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1193683', '1', '1', '2', '1', '3', '1', '1', '1', '1', '2'], ['831268', '1', '1', '1', '1', '1', '1', '1', '3', '1', '2'], ['1083817', '3', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1237674', '3', '1', '2', '1', '2', '1', '2', '1', '1', '2'], ['369565', '4', '1', '1', '1', '3', '1', '1', '1', '1', '2'], ['1365075', '4', '1', '4', '1', '2', '1', '1', '1', '1', '2'], ['1061990', '1', '1', '3', '2', '2', '1', '3', '1', '1', '2'], ['827627', '2', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1198641', '3', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1368882', '2', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1043068', '3', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1301945', '5', '1', '1', '1', '1', '1', '1', '1', '1', '2'], ['1158247', '1', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1059552', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1324681', '4', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1320077', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2'], ['695219', '1', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1204242', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1218860', '1', '1', '1', '1', '1', '1', '3', '1', '1', '2'], ['814265', '2', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1115762', '3', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1188472', '1', '1', '1', '1', '1', '1', '3', '1', '1', '2'], ['654244', '1', '1', '1', '1', '1', '1', '2', '1', '1', '2'], ['857774', '4', '1', '1', '1', '3', '1', '2', '2', '1', '2'], ['1330361', '5', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['787451', '5', '1', '2', '1', '2', '1', '1', '1', '1', '2'], ['1211594', '3', '1', '1', '1', '1', '1', '2', '1', '1', '2'], ['1224565', '6', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['636375', '5', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1026122', '2', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['535331', '3', '1', '1', '1', '3', '1', '2', '1', '1', '2'], ['1182404', '5', '1', '4', '1', '2', '1', '3', '2', '1', '2'], ['1070522', '3', '1', '1', '1', '1', '1', '2', '1', '1', '2'], ['1285531', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1196263', '4', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['704097', '1', '1', '1', '1', '1', '1', '2', '1', '1', '2'], ['606140', '1', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1276091', '2', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1018561', '2', '1', '2', '1', '2', '1', '3', '1', '1', '2'], ['718641', '1', '1', '1', '1', '5', '1', '3', '1', '1', '2'], ['1240603', '3', '1', '1', '1', '1', '1', '1', '1', '1', '2'], ['1318671', '3', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['646904', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1182404', '3', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1321942', '5', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1121732', '1', '1', '1', '1', '2', '1', '3', '2', '1', '2'], ['1201834', '2', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1321942', '5', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['780555', '5', '1', '1', '6', '3', '1', '2', '1', '1', '2'], ['1285722', '4', '1', '1', '3', '2', '1', '1', '1', '1', '2'], ['1182404', '4', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1212422', '3', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1105524', '4', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['342245', '1', '1', '3', '1', '2', '1', '1', '1', '1', '2'], ['1182404', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2'], ['756136', '1', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1299994', '5', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1176406', '1', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['704097', '1', '1', '1', '1', '1', '1', '2', '1', '1', '2'], ['1269574', '4', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1228311', '1', '1', '1', '1', '1', '1', '3', '1', '1', '2'], ['1277792', '4', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1276091', '6', '1', '1', '3', '2', '1', '1', '1', '1', '2'], ['1132347', '1', '1', '4', '1', '2', '1', '2', '1', '1', '2'], ['1181567', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2'], ['1177512', '1', '1', '1', '1', '10', '1', '1', '1', '1', '2'], ['1280258', '4', '1', '1', '1', '2', '1', '1', '2', '1', '2'], ['1182404', '3', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1328755', '3', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1253917', '4', '1', '1', '2', '2', '1', '2', '1', '1', '2'], ['1214092', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['798429', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['871549', '5', '1', '2', '1', '2', '1', '2', '1', '1', '2'], ['1241232', '3', '1', '4', '1', '2', '1', '3', '1', '1', '2'], ['1202125', '4', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1217051', '5', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1296263', '4', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1217952', '4', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1328331', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['324382', '1', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['666090', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['836433', '5', '1', '1', '3', '2', '1', '1', '1', '1', '2'], ['1140597', '7', '1', '2', '3', '2', '1', '2', '1', '1', '2'], ['566346', '3', '1', '1', '1', '2', '1', '2', '3', '1', '2'], ['1116192', '1', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1156272', '1', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1331405', '4', '1', '1', '1', '2', '1', '3', '2', '1', '2'], ['1277145', '5', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1174057', '1', '1', '2', '2', '2', '1', '3', '1', '1', '2'], ['1168278', '3', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1272166', '5', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['169356', '3', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['1206089', '2', '1', '1', '1', '1', '1', '3', '1', '1', '2'], ['1313658', '3', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1079304', '2', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['695091', '1', '1', '1', '1', '2', '1', '2', '1', '1', '2'], ['1017023', '4', '1', '1', '3', '2', '1', '3', '1', '1', '2'], ['1344449', '1', '1', '1', '1', '1', '1', '2', '1', '1', '2'], ['1298360', '1', '1', '1', '1', '2', '1', '1', '1', '1', '2'], ['1152331', '4', '1', '1', '1', '2', '1', '3', '1', '1', '2'], ['684955', '2', '1', '1', '1', '3', '1', '2', '1', '1', '2']]
result = constructDecisionTree(test,test_a,value_set,attributes)
result.printTree(0)






